using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Redpenguin.GoogleSheets.Scripts.Runtime.Attributes;
using Redpenguin.GoogleSheets.Scripts.Runtime.Core;
using UnityEditor;
using UnityEngine;

namespace Redpenguin.GoogleSheets.Scripts.Editor.Core
{
  public class SpreadSheetCodeFactory
  {
    private const string ScriptName = "%CLASS_NAME%";
    private const string SerializeClass = "%SERIALIZE_CLASS%";
    private const string SheetRange = "%SHEET_RANGE%";
    private const string NameSpace = "%NAMESPACE%";
    private const string SoTemplate = "CodeTemplates/SpreadSheetScriptableObjectTemplate";
    private const string ConfigDatabaseTemplate = "CodeTemplates/ConfigDatabaseTemplate";
    private const string AddContainerTemplate = "CodeTemplates/AddContainerTemplate";
    private const string CreateContainerTemplate = "CodeTemplates/CreateContainerTemplate";
    private const string ConfigDatabaseSoTemplate = "CodeTemplates/ConfigDatabaseSoTemplate";
    private const string SetDataTemplate = "CodeTemplates/SetDataTemplate";

    private const string SpreadSheetAttributeLink
      = "<a href=\"Assets/Plugins/Redpenguin/GoogleSheets/Scripts/Runtime/Attributes/SpreadSheet.cs\" line=\"6\">SpreadSheet</a>";

    private const string ExampleAttributeUsageLink
      = "<a href=\"Assets/Plugins/Redpenguin/GoogleSheets/Scripts/Runtime/Examples/ExampleData.cs\" line=\"8\">Example</a>";

    private readonly string _savePath =
      $"{Application.dataPath}/GoogleSheets/Scripts/AutoGenerated";
    private readonly string _configDatabaseSavePath =
      $"{Application.dataPath}/GoogleSheets/Scripts/AutoGenerated/DatabaseScripts";

    private readonly TextAsset _scriptTextAsset;
    private readonly TextAsset _configDatabaseScriptTextAsset;
    private readonly TextAsset _addContainerScriptText;
    private readonly TextAsset _createContainerScriptText;
    private readonly TextAsset _configDatabaseSoScriptText;
    private readonly TextAsset _setDataScriptText;
    private readonly List<Type> _listOfTypes = new List<Type>();

    public SpreadSheetCodeFactory()
    {
      _scriptTextAsset = Resources.Load<TextAsset>(SoTemplate);
      _configDatabaseScriptTextAsset = Resources.Load<TextAsset>(ConfigDatabaseTemplate);
      _addContainerScriptText = Resources.Load<TextAsset>(AddContainerTemplate);
      _createContainerScriptText = Resources.Load<TextAsset>(CreateContainerTemplate);
      _configDatabaseSoScriptText = Resources.Load<TextAsset>(ConfigDatabaseSoTemplate);
      _setDataScriptText = Resources.Load<TextAsset>(SetDataTemplate);

      CreateIfNotExist(_savePath);
      CreateIfNotExist(_configDatabaseSavePath);
    }

    private void CreateIfNotExist(string path)
    {
      if (!Directory.Exists(path))
      {
        Directory.CreateDirectory(path);
      }
    }

    public bool CreateAdditionalScripts()
    {
      var count = 0;
      DeleteAllScripts(_savePath);
      DeleteAllScripts(_configDatabaseSavePath);
      CreateIfNotExist(_configDatabaseSavePath);
      var configData = new ConfigDatabaseData
      {
        DataTypes = new List<string>()
      };
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        foreach (var type in assembly.GetTypes())
        {
          if (!(type.GetCustomAttribute(typeof(SpreadSheet)) is SpreadSheet sheet)) continue;
          //var scriptName = $"{sheet.Name}SheetDatabaseScriptableObject";
          var scriptName = $"{type.Name}SheetDatabaseScriptableObject";
          var file = Replace(_scriptTextAsset.text, scriptName, type.Name, sheet.Range, type.Namespace);
          CreateScript(file, scriptName, _savePath);
          configData.DataTypes.Add(type.Name);
          configData.Namespace = type.Namespace;
          count++;
        }
      }
      ScriptsCreatedLog(count);
      if (count == 0) return false;
      CreateScript(ConfigDatabaseReplace(configData), "ConfigDatabase", _configDatabaseSavePath);
      CreateScript(ConfigDatabaseSoReplace(configData), "ConfigDatabaseSO", _configDatabaseSavePath);
      AssetDatabase.SaveAssets();
      AssetDatabase.Refresh();
      return count > 0;
    }

    private void ScriptsCreatedLog(int count)
    {
      Debug.Log(count > 0
        ? "Additional scripts was created! Waiting for reload assemblies..."
        : $"Didn't find classes with {SpreadSheetAttributeLink} attribute. ({ExampleAttributeUsageLink})");
    }
    public struct ConfigDatabaseData
    {
      public string Namespace;
      public List<string> DataTypes;
    }
    private string Replace(string scriptText, string scriptName, string className, string sheetRange, string nameSpace)
    {
      var sb = new StringBuilder(scriptText);
      sb.Replace(ScriptName, scriptName);
      sb.Replace(SerializeClass, className);
      sb.Replace(SheetRange, sheetRange);
      sb.Replace(NameSpace, nameSpace);
      return sb.ToString();
    }
    private string ConfigDatabaseReplace(ConfigDatabaseData data)
    {
      var sb = new StringBuilder(_configDatabaseScriptTextAsset.text);
      var addContainers = new StringBuilder();
      var createContainers = new StringBuilder();
      foreach (var className in data.DataTypes)
      {
        addContainers.Append(_addContainerScriptText.text.Replace(SerializeClass, className));
        createContainers.Append(_createContainerScriptText.text.Replace(SerializeClass, className));
      }

      sb.Replace(NameSpace, data.Namespace);
      sb.Replace("%ADD_CONTAINERS%", addContainers.ToString());
      sb.Replace("%CREATE_CONTAINERS%", createContainers.ToString());
      return sb.ToString();
    }
    private string ConfigDatabaseSoReplace(ConfigDatabaseData data)
    {
      var sb = new StringBuilder(_configDatabaseSoScriptText.text);
      var setData = new StringBuilder();
      foreach (var className in data.DataTypes)
      {
        setData.Append(_setDataScriptText.text.Replace(SerializeClass, className));
      }
      sb.Replace(NameSpace, data.Namespace);
      sb.Replace("%SET_DATA%", setData.ToString());
      return sb.ToString();
    }

    private void CreateScript(string codeText, string scriptName, string savePath)
    {
      var path = $"{savePath}/{scriptName}.cs";
      File.WriteAllText(path, codeText);
    }

    private void DeleteAllScripts(string directoryPath)
    {
      var di = new DirectoryInfo(directoryPath);
      if(!di.Exists) return;
      foreach (var file in di.EnumerateFiles())
      {
        Debug.Log($"{file.Name} delete");
        file.Delete();
      }

      AssetDatabase.Refresh();
      AssetDatabase.SaveAssets();
    }

    public List<Type> GetGeneratedScriptsTypes()
    {
      _listOfTypes.Clear();
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        assembly.GetTypes().Where(type =>
            (type.GetCustomAttribute(typeof(SheetRange)) is SheetRange))
          .ToList().ForEach(x => _listOfTypes.Add(x));
      }

      return _listOfTypes;
    }

    public Type GetConfigDatabaseType()
    {
      Type configType = null;
      foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        configType = assembly.GetTypes().FirstOrDefault(type =>
          (type.IsClass && !type.IsAbstract && type.IsSubclassOf(typeof(ConfigDatabaseScriptableObject))));
        if (configType == null) continue;
        break;
      }

      Debug.Log($"GetConfigDatabaseType " + configType);
      return configType;
    }
  }
}